// ====== SAFE ARRAY UTILITIES ======
// Create this file at: src/utils/arrayUtils.ts

/**
 * Safely ensures a value is an array, returning empty array if undefined/null
 */
export function ensureArray<T>(value: T[] | undefined | null): T[] {
  return Array.isArray(value) ? value : [];
}

/**
 * Safely finds an item in an array, handling undefined arrays gracefully
 */
export function safeFind<T>(
  array: T[] | undefined | null, 
  predicate: (value: T, index: number, obj: T[]) => boolean
): T | undefined {
  return ensureArray(array).find(predicate);
}

/**
 * Safely maps over an array, handling undefined arrays gracefully
 */
export function safeMap<T, U>(
  array: T[] | undefined | null,
  callback: (value: T, index: number, array: T[]) => U
): U[] {
  return ensureArray(array).map(callback);
}

/**
 * Safely filters an array, handling undefined arrays gracefully
 */
export function safeFilter<T>(
  array: T[] | undefined | null,
  predicate: (value: T, index: number, array: T[]) => boolean
): T[] {
  return ensureArray(array).filter(predicate);
}

/**
 * Safe reduce with initial value requirement
 */
export function safeReduce<T, U>(
  array: T[] | undefined | null,
  callback: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U,
  initialValue: U
): U {
  return ensureArray(array).reduce(callback, initialValue);
}

/**
 * Check if array exists and has items
 */
export function hasItems<T>(array: T[] | undefined | null): array is T[] {
  return Array.isArray(array) && array.length > 0;
}

/**
 * Get array length safely
 */
export function safeLength<T>(array: T[] | undefined | null): number {
  return ensureArray(array).length;
}

// ====== EXAMPLE USAGE PATTERNS ======

// ❌ PROBLEMATIC CODE (causes TypeError):
// const result = data?.map(item => 
//   relatedData.find(related => related.id === item.id)
// );

// ✅ SAFE CODE:
// const result = safeMap(data, item => 
//   safeFind(relatedData, related => related.id === item.id)
// );

// ❌ PROBLEMATIC CODE:
// const filtered = useMemo(() => {
//   return moves?.filter(move => 
//     movers.find(mover => mover.id === move.moverId)
//   );
// }, [moves, movers]);

// ✅ SAFE CODE:
// const filtered = useMemo(() => {
//   return safeFilter(moves, move => 
//     safeFind(movers, mover => mover.id === move.moverId)
//   );
// }, [moves, movers]);

// ====== REACT HOOK FOR SAFE DATA ======
import { useMemo } from 'react';

/**
 * Custom hook that ensures data is always an array
 */
export function useSafeArray<T>(data: T[] | undefined | null): T[] {
  return useMemo(() => ensureArray(data), [data]);
}

/**
 * Custom hook for safe array operations
 */
export function useSafeArrayOperations<T>(data: T[] | undefined | null) {
  const safeData = useSafeArray(data);
  
  return useMemo(() => ({
    data: safeData,
    isEmpty: safeData.length === 0,
    hasItems: safeData.length > 0,
    length: safeData.length,
    find: (predicate: (item: T) => boolean) => safeData.find(predicate),
    filter: (predicate: (item: T) => boolean) => safeData.filter(predicate),
    map: <U>(callback: (item: T) => U) => safeData.map(callback),
  }), [safeData]);
}
